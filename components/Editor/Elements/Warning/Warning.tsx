import React, { useRef, useEffect, useState } from "react";
import styles from "./Warning.module.css"

interface WarningProps {
  editable: boolean;
  content: string;
  textAlign?: 'left' | 'center' | 'right';
  onFocus: () => void;
  onContentUpdate: (content: string) => void;
  onDelete: () => void;
  onEnter: () => void;
}

const Warning = React.forwardRef<HTMLDivElement, WarningProps>(({
  editable,
  content,
  textAlign = 'left',
  onFocus,
  onContentUpdate,
  onDelete,
  onEnter
}, ref) => {
  const internalRef = useRef<HTMLDivElement>(null);

  // Sync content with the internal ref
  useEffect(() => {
    // We only update if the content prop is different from the current innerHTML
    // to avoid an infinite loop and to allow the user to type.
    if (internalRef.current && content !== internalRef.current.innerHTML) {
      internalRef.current.innerHTML = content;
    }
  }, [content]);

  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {
    // Handle Enter key to create a new block
    if (e.key === 'Enter') {
      e.preventDefault();
      onEnter();
    } 
    // Handle Backspace key to delete the block if it's empty
    else if (e.key === 'Backspace') {
      const isCursorAtStart = window.getSelection()?.anchorOffset === 0;
      if (e.currentTarget.textContent?.trim() === '' && isCursorAtStart) {
        e.preventDefault();
        onDelete();
      }
    }
  };

  const handleInput = (e: React.FormEvent<HTMLDivElement>) => {
    onContentUpdate(e.currentTarget.innerHTML);
  };

  const refToUse = (el: HTMLDivElement | null) => {
    // This function ensures both the external ref and the internal ref are set
    if (typeof ref === 'function') {
      ref(el);
    } else if (ref) {
      (ref as React.MutableRefObject<HTMLDivElement | null>).current = el;
    }
    (internalRef as React.MutableRefObject<HTMLDivElement | null>).current = el;
  };

  return (
    <div className={styles.warning}>
      <div className={styles.icon}>
        <svg xmlns="http://www.w3.org/2000/svg" height="25" viewBox="0 0 45 40" fill="none">
          <path d="M24.8628 1.08056C25.4556 1.69115 25.8343 2.4323 26.241 3.1727C26.3269 3.32658 26.413 3.48038 26.4993 3.63408C26.6311 3.86887 26.7628 4.10371 26.894 4.33885C27.2973 5.06175 27.7139 5.77657 28.1334 6.49023C28.7535 7.54866 29.365 8.61175 29.9722 9.67752C30.6514 10.8692 31.3371 12.0568 32.0297 13.2408C32.7841 14.5309 33.5302 15.8258 34.2762 17.1208C34.6596 17.7863 35.0435 18.4515 35.4274 19.1168C35.5806 19.3824 35.7339 19.648 35.8871 19.9136C35.963 20.0451 36.0388 20.1765 36.117 20.312C37.5727 22.8353 39.0284 25.3585 40.4842 27.8818C40.5601 28.0134 40.6361 28.1451 40.7143 28.2807C40.8666 28.5446 41.0187 28.8087 41.1708 29.0727C41.5261 29.6897 41.8824 30.306 42.2426 30.9201C42.3694 31.1364 42.4959 31.3529 42.6223 31.5695C42.7804 31.8403 42.9392 32.1107 43.0987 32.3807C43.9522 33.8457 44.5209 35.1349 44.0775 36.8537C43.6603 37.9124 42.7968 38.6536 41.7847 39.1182C41.2643 39.3035 40.7752 39.3591 40.2247 39.3599C40.0936 39.3604 39.9625 39.3608 39.8274 39.3613C39.6124 39.3611 39.6124 39.3612 39.393 39.361C39.2402 39.3614 39.0873 39.3617 38.9299 39.3621C38.5059 39.3631 38.082 39.3633 37.658 39.3634C37.2007 39.3636 36.7433 39.3645 36.2859 39.3654C35.286 39.367 34.286 39.3678 33.286 39.3683C32.6615 39.3687 32.0369 39.3692 31.4123 39.3697C29.6825 39.3712 27.9527 39.3725 26.2229 39.3729C26.0569 39.3729 26.0569 39.3729 25.8875 39.373C25.7211 39.373 25.7211 39.373 25.5513 39.3731C25.3265 39.3731 25.1017 39.3732 24.8769 39.3732C24.7096 39.3733 24.7096 39.3733 24.5389 39.3733C22.7324 39.3738 20.9259 39.3759 19.1194 39.3788C17.2639 39.3817 15.4085 39.3832 13.553 39.3834C12.5116 39.3835 11.4701 39.3842 10.4286 39.3864C9.54169 39.3883 8.65478 39.3889 7.76785 39.3879C7.31558 39.3874 6.86333 39.3875 6.41107 39.3893C5.92005 39.3911 5.42909 39.3901 4.93808 39.3888C4.72512 39.3903 4.72512 39.3903 4.50787 39.3918C3.21554 39.3839 2.11907 39.1627 1.1598 38.2477C0.222927 37.27 0.0255393 36.4481 0 35.115C0.168991 33.9214 0.849856 32.8902 1.44759 31.8659C1.53505 31.7147 1.62243 31.5634 1.70974 31.412C1.88904 31.1015 2.0688 30.7912 2.24896 30.4812C2.49551 30.0568 2.74079 29.6317 2.98568 29.2063C3.36438 28.5486 3.74381 27.8914 4.12351 27.2343C4.50625 26.5717 4.8885 25.9089 5.2708 25.2462C5.42403 24.9806 5.57727 24.715 5.7305 24.4493C5.80635 24.3179 5.88221 24.1864 5.96036 24.0509C6.19021 23.6525 6.42006 23.2541 6.64991 22.8557C6.72577 22.7242 6.80163 22.5927 6.87979 22.4572C7.03292 22.1918 7.18605 21.9264 7.3392 21.661C7.72403 20.9941 8.1087 20.327 8.49304 19.6598C9.2313 18.3785 9.97164 17.0986 10.7183 15.8222C11.3405 14.7585 11.9546 13.6903 12.5648 12.6196C13.2439 11.4279 13.9296 10.2403 14.6222 9.05638C15.1423 8.16697 15.6588 7.27551 16.1735 6.38297C16.2491 6.25221 16.3247 6.12146 16.4026 5.98674C16.7619 5.3648 17.1195 4.74202 17.4709 4.1156C17.5941 3.89624 17.7179 3.67721 17.8418 3.45828C17.9969 3.18394 18.1509 2.90899 18.3036 2.63332C19.0608 1.29914 19.8832 0.462671 21.3758 0.00839952C22.731 -0.0458079 23.8378 0.145465 24.8628 1.08056Z" fill="#e9da08ff"/>
          <path d="M23.6442 12.1038C24.1057 12.4475 24.346 12.7983 24.4558 13.3551C24.4706 13.7182 24.4789 14.0786 24.4814 14.4418C24.4832 14.6063 24.4832 14.6063 24.4851 14.7742C24.4887 15.1369 24.4914 15.4996 24.4937 15.8624C24.4945 15.9865 24.4953 16.1106 24.4961 16.2385C24.5001 16.8954 24.5031 17.5522 24.5055 18.2091C24.5077 18.7521 24.5119 19.2949 24.5181 19.8378C24.5254 20.4942 24.5292 21.1504 24.5304 21.8068C24.5314 22.0564 24.5338 22.3061 24.5374 22.5557C24.5421 22.9058 24.5423 23.2556 24.5413 23.6057C24.5437 23.708 24.5462 23.8103 24.5487 23.9157C24.539 24.707 24.2586 25.166 23.7203 25.7365C23.2344 26.1365 22.7616 26.1753 22.1497 26.1732C22.0626 26.173 21.9755 26.1728 21.8857 26.1726C21.2328 26.1502 20.8317 26.0189 20.3468 25.5895C19.8078 24.9339 19.7428 24.4577 19.7441 23.6327C19.7428 23.5206 19.7416 23.4085 19.7403 23.293C19.7368 22.9229 19.7361 22.5529 19.7357 22.1829C19.7345 21.925 19.7333 21.6671 19.732 21.4092C19.7298 20.8687 19.7291 20.3283 19.7294 19.7878C19.7294 19.0965 19.7244 18.4053 19.718 17.714C19.7139 17.1813 19.7132 16.6487 19.7134 16.116C19.713 15.8612 19.7113 15.6064 19.7085 15.3516C19.7049 14.9945 19.706 14.6377 19.7082 14.2806C19.7061 14.1762 19.704 14.0718 19.7019 13.9642C19.7143 13.1743 19.9787 12.6897 20.533 12.1292C21.453 11.5404 22.7038 11.5506 23.6442 12.1038Z" fill="#fff9a6"/>
          <path d="M23.1384 29.6268C23.7646 29.9568 24.1879 30.4852 24.4558 31.1304C24.5363 31.8031 24.5485 32.4054 24.2566 33.0229C23.7538 33.5654 23.2153 34.1266 22.4537 34.2363C21.7299 34.2477 21.2186 34.1785 20.6556 33.7048C20.0872 33.1275 19.7786 32.7369 19.7515 31.9119C19.7596 31.1609 19.908 30.7061 20.4104 30.1497C20.4684 30.0851 20.5264 30.0205 20.5861 29.9539C21.271 29.3407 22.2957 29.3522 23.1384 29.6268Z" fill="#fff9a6"/>
        </svg>
      </div>
      <div
        ref={refToUse}
        className={styles.text}
        contentEditable={editable}
        onInput={handleInput}
        onKeyDown={handleKeyDown}
        onFocus={onFocus}
        suppressContentEditableWarning={true}
        style={{ textAlign }}
      >

      </div>
    </div>
  );
});

Warning.displayName = "Warning";
export default Warning;